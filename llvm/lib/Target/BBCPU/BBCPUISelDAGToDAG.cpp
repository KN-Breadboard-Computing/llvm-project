//===-- BBCPUISelDAGToDAG.cpp - A dag to dag inst
//selector for BBCPU --------===//
//
// Part of the LLVM Project, under the Apache License
// v2.0 with LLVM Exceptions. See
// https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH
// LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the
// BBCPU target.
//
//===----------------------------------------------------------------------===//

#include "BBCPU.h"
#include "BBCPUTargetMachine.h"
#include "BBCPURegisterInfo.h"
#include "MCTargetDesc/BBCPUMCTargetDesc.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Pass.h"
#include "llvm/Support/Debug.h"

using namespace llvm;

#define DEBUG_TYPE "bbcpu-isel"
#define PASS_NAME "BBCPU DAG->DAG Pattern Instruction Selection"

namespace {

class BBCPUDAGToDAGISel : public SelectionDAGISel {
public:
  static char ID;

  BBCPUDAGToDAGISel() = delete;

  BBCPUDAGToDAGISel(BBCPUTargetMachine &TM)
      : SelectionDAGISel(ID, TM) {}

private:
// Include the pieces autogenerated from the target
// description.
#include "BBCPUGenDAGISel.inc"

  void Select(SDNode *N) override;
};
} // end anonymous namespace

char BBCPUDAGToDAGISel::ID = 0;

INITIALIZE_PASS(BBCPUDAGToDAGISel, DEBUG_TYPE, PASS_NAME,
                false, false)

void BBCPUDAGToDAGISel::Select(SDNode *Node) {
  // Instruction Selection not handled by the
  // auto-generated tablegen selection should be handled
  // here.

  // Select the default instruction.
  SelectCode(Node);
}


FunctionPass *llvm::createBBCPUISelDag(BBCPUTargetMachine &TM) {
  return new BBCPUDAGToDAGISel(TM);
}
