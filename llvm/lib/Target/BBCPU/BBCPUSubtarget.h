//=====-- BBCPUSubtarget.h - Define Subtarget for the BBCPU -----*- C++ -*--==//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the BBCPU specific subclass of TargetSubtarget.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_BBCPU_BBCPUSUBTARGET_H
#define LLVM_LIB_TARGET_BBCPU_BBCPUSUBTARGET_H

#include "BBCPUFrameLowering.h"
#include "BBCPUISelLowering.h"
#include "BBCPUInstrInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"

#define GET_SUBTARGETINFO_HEADER
#include "BBCPUGenSubtargetInfo.inc"

namespace llvm {

class BBCPUSubtarget : public BBCPUGenSubtargetInfo {
public:
  // This constructor initializes the data members to match that
  // of the specified triple.
  BBCPUSubtarget(const Triple &TargetTriple, StringRef Cpu,
                 StringRef FeatureString, const TargetMachine &TM,
                 const TargetOptions &Options, CodeModel::Model CodeModel,
                 CodeGenOptLevel OptLevel);

  // ParseSubtargetFeatures - Parses features string setting specified
  // subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  BBCPUSubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS);

  void initSubtargetFeatures(StringRef CPU, StringRef FS);

  bool enableMachineScheduler() const override { return true; }

  const BBCPUInstrInfo *getInstrInfo() const override { return &InstrInfo; }

  const TargetFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }

  const BBCPURegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }

  const BBCPUTargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }

  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }

private:
  BBCPUFrameLowering FrameLowering;
  BBCPUInstrInfo InstrInfo;
  BBCPUTargetLowering TLInfo;
  SelectionDAGTargetInfo TSInfo;
};
} // namespace llvm

#endif // LLVM_LIB_TARGET_BBCPU_BBCPUSUBTARGET_H
